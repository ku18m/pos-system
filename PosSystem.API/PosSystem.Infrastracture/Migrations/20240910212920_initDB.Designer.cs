// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PosSystem.Infrastracture.Persistence.Data;

#nullable disable

namespace PosSystem.Infrastracture.Migrations
{
    [DbContext(typeof(PosDbContext))]
    [Migration("20240910212920_initDB")]
    partial class initDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("BillNumber", "dbo")
                .StartsAt(1000000L);

            modelBuilder.HasSequence<int>("ClientNumber", "dbo")
                .StartsAt(1000L);

            modelBuilder.Entity("PosSystem.Core.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "17caa7db-220c-478c-b049-be42900c3c95",
                            CompanyId = "84057f93-c9d6-46cf-b018-e3ffd5cda383",
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = "2ea866bf-d98c-4da1-a99d-f67c0df95681",
                            CompanyId = "a7fd0fb6-871d-4452-9b5a-7a376d8fa3c7",
                            Name = "Furniture"
                        },
                        new
                        {
                            CategoryId = "634430fe-2f01-42d5-aaf1-eda47c9ba543",
                            CompanyId = "c1c55d49-79bd-4ca4-9b6a-afc74e371bfd",
                            Name = "Clothing"
                        });
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR dbo.ClientNumber");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("Address");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("Phone");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = "521cfe59-b916-4f4d-a2a3-0f9d023cbbb2",
                            Address = "123 Main St",
                            FirstName = "John",
                            LastName = "Doe",
                            Number = 1,
                            Phone = "1234567890"
                        },
                        new
                        {
                            ClientId = "3d1cae27-407d-4901-ac90-35e972ec813a",
                            Address = "456 Elm St",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Number = 2,
                            Phone = "0987654321"
                        },
                        new
                        {
                            ClientId = "c918b848-0e0d-4d94-990f-fd1a7bc9e445",
                            Address = "789 Oak St",
                            FirstName = "Jim",
                            LastName = "Beam",
                            Number = 3,
                            Phone = "1112223333"
                        });
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = "84057f93-c9d6-46cf-b018-e3ffd5cda383",
                            Name = "Tech Corp"
                        },
                        new
                        {
                            CompanyId = "a7fd0fb6-871d-4452-9b5a-7a376d8fa3c7",
                            Name = "Biz Inc"
                        },
                        new
                        {
                            CompanyId = "c1c55d49-79bd-4ca4-9b6a-afc74e371bfd",
                            Name = "Retail LLC"
                        });
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = "895fcfbd-0257-4a6b-ad18-8686e19b7fae",
                            DateOfBirth = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alice",
                            LastName = "Smith"
                        },
                        new
                        {
                            EmployeeId = "0a8f0244-4c3a-4336-9bd9-ec9180807951",
                            DateOfBirth = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bob",
                            LastName = "Johnson"
                        },
                        new
                        {
                            EmployeeId = "3ff029bf-a4a2-4510-91c6-5301fe4ec389",
                            DateOfBirth = new DateTime(1995, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Charlie",
                            LastName = "Brown"
                        });
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BillNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("NEXT VALUE FOR dbo.BillNumber");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DueAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("[TotalAmount] - [TotalDiscount] - [PaidAmount]");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<decimal>("FinalAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("[TotalAmount] - [TotalDiscount]");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("BillDate");

                    b.HasIndex("BillNumber")
                        .IsUnique();

                    b.HasIndex("ClientId");

                    b.HasIndex("Date");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = "93f4fff1-2a07-482b-97ab-fcef3be93565",
                            BillDate = new DateTime(2024, 9, 11, 0, 29, 19, 957, DateTimeKind.Local).AddTicks(9672),
                            BillNumber = 1L,
                            ClientId = "521cfe59-b916-4f4d-a2a3-0f9d023cbbb2",
                            Date = new DateTime(2024, 9, 11, 0, 29, 19, 957, DateTimeKind.Local).AddTicks(9718),
                            DueAmount = 0m,
                            EmployeeId = "895fcfbd-0257-4a6b-ad18-8686e19b7fae",
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            FinalAmount = 1000m,
                            PaidAmount = 1000m,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            TotalAmount = 1000m,
                            TotalDiscount = 0m
                        },
                        new
                        {
                            Id = "75cd73c7-f86a-48a5-b6de-0991f80b8649",
                            BillDate = new DateTime(2024, 9, 11, 0, 29, 19, 957, DateTimeKind.Local).AddTicks(9725),
                            BillNumber = 2L,
                            ClientId = "3d1cae27-407d-4901-ac90-35e972ec813a",
                            Date = new DateTime(2024, 9, 11, 0, 29, 19, 957, DateTimeKind.Local).AddTicks(9729),
                            DueAmount = 0m,
                            EmployeeId = "0a8f0244-4c3a-4336-9bd9-ec9180807951",
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            FinalAmount = 50m,
                            PaidAmount = 50m,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            TotalAmount = 50m,
                            TotalDiscount = 0m
                        },
                        new
                        {
                            Id = "d59456cc-77ab-4d88-8069-841a86845736",
                            BillDate = new DateTime(2024, 9, 11, 0, 29, 19, 957, DateTimeKind.Local).AddTicks(9733),
                            BillNumber = 3L,
                            ClientId = "c918b848-0e0d-4d94-990f-fd1a7bc9e445",
                            Date = new DateTime(2024, 9, 11, 0, 29, 19, 957, DateTimeKind.Local).AddTicks(9737),
                            DueAmount = 0m,
                            EmployeeId = "3ff029bf-a4a2-4510-91c6-5301fe4ec389",
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            FinalAmount = 20m,
                            PaidAmount = 20m,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            TotalAmount = 20m,
                            TotalDiscount = 0m
                        });
                });

            modelBuilder.Entity("PosSystem.Core.Entities.InvoiceItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FinalAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("([Quantity] * [Price]) - [Discount]");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("[Quantity] * [Price]");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvoiceItems");

                    b.HasData(
                        new
                        {
                            Id = "44cd904f-82e9-420f-987a-8897c39ebc57",
                            Discount = 0m,
                            FinalAmount = 1000m,
                            InvoiceId = "93f4fff1-2a07-482b-97ab-fcef3be93565",
                            Price = 1000m,
                            ProductId = "79d247",
                            Quantity = 1m,
                            TotalAmount = 1000m,
                            UnitId = "27cb9365-ade2-471e-be53-a13e67c6ed7e"
                        },
                        new
                        {
                            Id = "400b611d-39de-45b8-b34d-20fd4c1a462a",
                            Discount = 0m,
                            FinalAmount = 50m,
                            InvoiceId = "75cd73c7-f86a-48a5-b6de-0991f80b8649",
                            Price = 50m,
                            ProductId = "af9d5b",
                            Quantity = 1m,
                            TotalAmount = 50m,
                            UnitId = "017cf13d-ce50-429e-b337-e115ba1d92cf"
                        },
                        new
                        {
                            Id = "b5f6786a-c57f-40bb-8c3f-fb0c0a2c65ab",
                            Discount = 0m,
                            FinalAmount = 20m,
                            InvoiceId = "d59456cc-77ab-4d88-8069-841a86845736",
                            Price = 20m,
                            ProductId = "8404e5",
                            Quantity = 1m,
                            TotalAmount = 20m,
                            UnitId = "d396c365-d491-4d48-adc4-e3a13caf8440"
                        });
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UnitId")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = "79d247",
                            BuyingPrice = 800m,
                            CategoryId = "17caa7db-220c-478c-b049-be42900c3c95",
                            CompanyId = "84057f93-c9d6-46cf-b018-e3ffd5cda383",
                            Name = "Laptop",
                            Quantity = 10,
                            SellingPrice = 1000m,
                            UnitId = "27cb9365-ade2-471e-be53-a13e67c6ed7e"
                        },
                        new
                        {
                            ProductId = "af9d5b",
                            BuyingPrice = 30m,
                            CategoryId = "2ea866bf-d98c-4da1-a99d-f67c0df95681",
                            CompanyId = "a7fd0fb6-871d-4452-9b5a-7a376d8fa3c7",
                            Name = "Chair",
                            Quantity = 100,
                            SellingPrice = 50m,
                            UnitId = "017cf13d-ce50-429e-b337-e115ba1d92cf"
                        },
                        new
                        {
                            ProductId = "8404e5",
                            BuyingPrice = 10m,
                            CategoryId = "634430fe-2f01-42d5-aaf1-eda47c9ba543",
                            CompanyId = "c1c55d49-79bd-4ca4-9b6a-afc74e371bfd",
                            Name = "T-Shirt",
                            Quantity = 200,
                            SellingPrice = 20m,
                            UnitId = "d396c365-d491-4d48-adc4-e3a13caf8440"
                        });
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Unit", b =>
                {
                    b.Property<string>("UnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            UnitId = "27cb9365-ade2-471e-be53-a13e67c6ed7e",
                            Name = "Piece"
                        },
                        new
                        {
                            UnitId = "017cf13d-ce50-429e-b337-e115ba1d92cf",
                            Name = "Box"
                        },
                        new
                        {
                            UnitId = "d396c365-d491-4d48-adc4-e3a13caf8440",
                            Name = "Pack"
                        });
                });

            modelBuilder.Entity("PosSystem.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Category", b =>
                {
                    b.HasOne("PosSystem.Core.Entities.Company", "Company")
                        .WithMany("Categories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Client", b =>
                {
                    b.HasOne("PosSystem.Core.Entities.Employee", null)
                        .WithMany("Clients")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Invoice", b =>
                {
                    b.HasOne("PosSystem.Core.Entities.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PosSystem.Core.Entities.Employee", "Employee")
                        .WithMany("Invoices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.InvoiceItem", b =>
                {
                    b.HasOne("PosSystem.Core.Entities.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PosSystem.Core.Entities.Product", "Product")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PosSystem.Core.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Product", b =>
                {
                    b.HasOne("PosSystem.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PosSystem.Core.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PosSystem.Core.Entities.Employee", null)
                        .WithMany("Products")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("PosSystem.Core.Entities.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Client", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Company", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Employee", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Invoices");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Product", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("PosSystem.Core.Entities.Unit", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
